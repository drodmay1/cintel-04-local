[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# names the page\nui.page_opts(title=\"DavidRm Penguin\", fillable=True)\n\n# creates sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h5(\"Sidebar\")\n    \n    # Creates a dropdown input to choose a column \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Creates a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly bins\", 30)\n    \n    # Creates a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn bins\", 1, 40, 20)\n\n    # Adds a horizontal rule to the sidebar\n    ui.hr()\n    \n    # Creates a checkbox group input\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n\n    # Creates a checkbox group input for islands\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Islands\",\n        penguins_df[\"island\"].unique().tolist(),\n        selected=penguins_df[\"island\"].unique().tolist(),\n        inline=True,\n    )\n\n    # Adds a hyperlink to GitHub Repo\n    ui.a(\n        \"GitHub\",\n         href=\"https://github.com/drodmay1/cintel-03-reactive/blob/main/app.py\",\n         target=\"_blank\",\n         )\n\n# Creates a DataTable showing all data\n\nwith ui.layout_columns():        \n    with ui.card(full_screen=True):\n        ui.h6(\"Penguins DataTable\")\n        \n\n        @render.data_frame\n        def render_penguins_table():\n            return render.DataTable(filtered_data())\n\n# Creates a DataGrid showing all data      \n    with ui.card(full_screen=True):\n        ui.h6(\"Penguins DataGrid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data()) \n\n# Creates a Plotly Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n    \n        @render_plotly\n        def plotly_histogram():\n          return px.histogram(\n          filtered_data(), \n          x=input.selected_attribute(), \n          nbins=input.plotly_bin_count(),\n          color=\"species\",\n          )     \n\n# Creates a Seaborn Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n\n        palette = sns.color_palette(\"Set3\")  # Choose a palette with 3 colors\n\n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n          histplot = sns.histplot(filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count(), hue=\"species\", palette=palette)\n          histplot.set_title(\"Palmer Penguins\")\n          histplot.set_xlabel(\"Body Mass (g)\")  # Set x-axis label\n          histplot.set_ylabel(\"Count\")  # Set y-axis label\n          return histplot\n\n# Creates a Plotly Scatterplot showing all species and islands\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species and islands\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(filtered_data(),\n                x=\"bill_length_mm\",\n                y=\"body_mass_g\",\n                color=\"species\",\n                facet_col=\"island\",  # Add facet_col parameter to separate scatterplots by island\n                title=\"Penguins Plot\",\n                labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n            }, \n        )\n\n# Creates a Plotly Boxplot showing all species and islands\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Boxplot: Species\")\n\n        @render_plotly\n        def plotly_boxplot():\n            return px.box(filtered_data(),\n                x=\"species\",\n                y=input.selected_attribute(),\n                color=\"island\", #Add a color parameter to differentiate boxplots by island\n                title=\"Penguins Boxplot\",\n                labels={\n                    \"species\": \"Species\",\n                    input.selected_attribute(): input.selected_attribute().replace(\"_\", \" \").title(),\n                },\n            )\n        \n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Reactive calculation to filter data based on selected species and islands\n@reactive.calc\ndef filtered_data():\n    return penguins_df[\n        (penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"].isin(input.selected_island_list()))\n    ]\n", "type": "text"}]